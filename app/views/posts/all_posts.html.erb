<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>勤怠履歴一覧</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    /* カスタムCSS */
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f9fa; /* 背景色を設定 */
    }
    .container {
      margin-top: 30px;
    }
    h1 {
      color: #007bff; /* タイトルの色を設定 */
      margin-bottom: 30px;
    }
    th {
      background-color: #007bff; /* テーブルのヘッダーの背景色を設定 */
      color: #fff; /* テーブルのヘッダーの文字色を設定 */
    }
    tbody tr:nth-child(odd) {
      background-color: #f8f9fa; /* 奇数行の背景色を設定 */
    }
    tbody tr:nth-child(even) {
      background-color: #e9ecef; /* 偶数行の背景色を設定 */
    }
    /* 勤怠登録画面に戻るボタン */
    .return-button {
      position: fixed;
      top: 20px;
      right: 20px;
    }
    /* スクロールしても見出しは固定 */
    .table-sticky__title {
        position: sticky;
        top:  0;
        left: 0;
    }
    .scroll_area {
      border: 2px solid black; /* 周囲を黒で囲む */
    }
    /* 編集・削除ボタンを横並びにする */
    .edit-delete-buttons {
      display: flex;
    }
    .edit-delete-buttons .btn {
      margin-right: 5px;
    }
    #sort_table {
      border-collapse:collapse;
    }
    #sort_table td {
      border:1px solid lightgray;
    }
    #sort_table th {
      cursor:pointer;
      background-color:#007bff;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>勤怠履歴一覧</h1>
    
    <div class="scroll_area" style="width:100%;max-height:550px;overflow-x:auto;">
    <table class="table table-striped table-bordered" id="sort_table">
      <thead>
        <tr class="table-sticky__title">
          <th>社員番号</th>
          <th>名前</th>
          <th>出勤/退勤</th>
          <th>休憩時間</th>
          <th>登録日時</th>
          <th>編集・削除</th>
        </tr>
      </thead>
      <tbody>
        <% @posts.each do |post| %>
          <% user = User.find_by(employee_id: post.employee_id) %>
          <tr>
            <td><%= post.employee_id %></td>
            <td><%= user.name if user %></td>
            <td><%= post.status %></td>
            <% if post.status == "出勤" %>
              <td></td> <!-- 出勤の場合は空のセルを表示 -->
            <% else %>
              <!-- 退勤の場合は休憩時間を表示 -->
              <td><%= post.break_time.strftime('%H') %>時間<%= post.break_time.strftime('%M') %>分</td>
            <% end %>
            <td><%= post.created_at.in_time_zone('Tokyo').strftime('%Y年%m月%d日 %H時%M分') %></td>
            <!-- 編集ボタンと削除ボタンを追加 -->
            <td class="edit-delete-buttons">
              <%= link_to "編集", edit_post_path(post), class: "btn btn-primary btn-sm mr-1" %>
              <%= button_to "削除", post, { method: :delete, form: { data: { turbo_confirm: "本当に削除しますか？" } }, class: "btn btn-danger btn-sm" } %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
    </div>

    <!-- 勤怠登録画面に戻るボタン -->
    <a href="<%= new_post_path %>" class="btn btn-primary return-button">勤怠登録画面に戻る</a>
  </div>
  <script>
    // (document).on ("turbo-rails:load", function(){
    window.addEventListener('load', function () {
      let column_no = 0; //今回クリックされた列番号
      let column_no_prev = 0; //前回クリックされた列番号
      document.querySelectorAll('#sort_table th').forEach(elm => {
        elm.onclick = function () {
          column_no = this.cellIndex; //クリックされた列番号
          let table = this.parentNode.parentNode.parentNode;
          let sortType = 0; //0:数値 1:文字
          let sortArray = new Array; //クリックした列のデータを全て格納する配列
          for (let r = 1; r < table.rows.length; r++) {
            //行番号と値を配列に格納
            let column = new Object;
            column.row = table.rows[r];
            column.value = table.rows[r].cells[column_no].textContent;
            sortArray.push(column);
            //数値判定
            if (isNaN(Number(column.value))) {
              sortType = 1; //値が数値変換できなかった場合は文字列ソート
            }
          }
          if (sortType == 0) { //数値ソート
            if (column_no_prev == column_no) { //同じ列が2回クリックされた場合は降順ソート
              sortArray.sort(compareNumberDesc);
            } else {
              sortArray.sort(compareNumber);
            }
          } else { //文字列ソート
            if (column_no_prev == column_no) { //同じ列が2回クリックされた場合は降順ソート
              sortArray.sort(compareStringDesc);
            } else {
              sortArray.sort(compareString);
            }
          }
          //ソート後のTRオブジェクトを順番にtbodyへ追加（移動）
          let tbody = this.parentNode.parentNode;
          for (let i = 0; i < sortArray.length; i++) {
            tbody.appendChild(sortArray[i].row);
          }
          //昇順／降順ソート切り替えのために列番号を保存
          if (column_no_prev == column_no) {
            column_no_prev = -1; //降順ソート
          } else {
            column_no_prev = column_no;
          }
        };
      });
    });
    //数値ソート（昇順）
    function compareNumber(a, b)
    {
      return a.value - b.value;
    }
    //数値ソート（降順）
    function compareNumberDesc(a, b)
    {
      return b.value - a.value;
    }
    //文字列ソート（昇順）
    function compareString(a, b) {
      if (a.value < b.value) {
        return -1;
      } else {
        return 1;
      }
      return 0;
    }
    //文字列ソート（降順）
    function compareStringDesc(a, b) {
      if (a.value > b.value) {
        return -1;
      } else {
        return 1;
      }
      return 0;
    }
  </script>
</body>
</html>
